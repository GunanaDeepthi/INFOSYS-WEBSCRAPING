{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMK1YRYuoc4jt4lmF5U6PH5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GunanaDeepthi/INFOSYS-WEBSCRAPING/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "from datetime import datetime\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import streamlit as st\n",
        "from openai import AzureOpenAI\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from transformers import pipeline\n",
        "import requests\n",
        "\n",
        "API_KEY = \"\"  # Groq API Key\n",
        "SLACK_WEBHOOK = \"\"  # Slack webhook URL\n",
        "\n",
        "\n",
        "def truncate_text(text, max_length=512):\n",
        "    return text[:max_length]\n",
        "\n",
        "\n",
        "def load_competitor_data():\n",
        "    \"\"\"Load competitor data from a CSV file.\"\"\"\n",
        "    data = pd.read_csv(\"competitor_data.csv\")\n",
        "    print(data.head())\n",
        "    return data\n",
        "\n",
        "\n",
        "def load_reviews_data():\n",
        "    \"\"\"Load reviews data from a CSV file.\"\"\"\n",
        "    reviews = pd.read_csv(\"reviews.csv\")\n",
        "    return reviews\n",
        "\n",
        "\n",
        "def analyze_sentiment(reviews):\n",
        "    \"\"\"Analyze customer sentiment for reviews.\"\"\"\n",
        "    sentiment_pipeline = pipeline(\"sentiment-analysis\")\n",
        "    return sentiment_pipeline(reviews)\n",
        "\n",
        "\n",
        "def train_predictive_model(data):\n",
        "    \"\"\"Train a predictive model for competitor pricing strategy.\"\"\"\n",
        "    data[\"Discount\"] = data[\"Discount\"].str.replace(\"%\", \"\").astype(float)  # Assuming Discount column has values like \"10%\"\n",
        "    data[\"Price\"] = data[\"Price\"].astype(float)\n",
        "\n",
        "    # Assuming the desired discount is related to the price\n",
        "    data[\"Predicted Discount\"] = data[\"Discount\"] + (data[\"Price\"] * 0.05).round(2)\n",
        "\n",
        "    x = data[[\"Price\", \"Discount\"]]  # Features\n",
        "    y = data[\"Predicted Discount\"]  # Target variable\n",
        "    print(x)\n",
        "\n",
        "    x_train, x_test, y_train, y_test = train_test_split(\n",
        "        x, y, test_size=0.2, random_state=42\n",
        "    )\n",
        "\n",
        "    model = RandomForestRegressor(random_state=42)  # Using Random Forest for regression\n",
        "    model.fit(x_train, y_train)\n",
        "\n",
        "    return model\n",
        "\n",
        "\n",
        "def forecast_discounts_arima(data, future_days=5):\n",
        "    \"\"\"\n",
        "    Forecast future discounts using ARIMA.\n",
        "\n",
        "    Args:\n",
        "        data: DataFrame containing historical discount data (with a datetime index).\n",
        "        future_days: Number of days to forecast.\n",
        "\n",
        "    Returns:\n",
        "        DataFrame with historical and forecasted discounts.\n",
        "    \"\"\"\n",
        "    data = data.sort_index()\n",
        "    data[\"Discount\"] = pd.to_numeric(data[\"Discount\"], errors=\"coerce\")\n",
        "    data = data.dropna(subset=[\"Discount\"])\n",
        "\n",
        "    discount_series = data[\"Discount\"]\n",
        "\n",
        "    if not isinstance(data.index, pd.DatetimeIndex):\n",
        "        try:\n",
        "            data.index = pd.to_datetime(data.index)\n",
        "        except Exception as e:\n",
        "            raise ValueError(\"Index must be datetime or convertible to datetime.\") from e\n",
        "\n",
        "    model = ARIMA(discount_series, order=(5, 1, 0))\n",
        "    model_fit = model.fit()\n",
        "    forecast = model_fit.forecast(steps=future_days)\n",
        "    future_dates = pd.date_range(\n",
        "        start=discount_series.index[-1] + pd.Timedelta(days=1), periods=future_days\n",
        "    )\n",
        "\n",
        "    forecast_df = pd.DataFrame({\"Date\": future_dates, \"Predicted Discount\": forecast})\n",
        "    return forecast_df\n",
        "\n",
        "\n",
        "def send_to_slack(data):\n",
        "    \"\"\"Send strategic recommendations to Slack.\"\"\"\n",
        "    payload = {\"text\": data}\n",
        "    requests.post(SLACK_WEBHOOK, data=json.dumps(payload))\n",
        "\n",
        "\n",
        "def generate_strategy_recommendation(product_name, competitor_data, sentiment):\n",
        "    \"\"\"\n",
        "    Generate strategic recommendations using the provided data.\n",
        "    \"\"\"\n",
        "    date = datetime.now()\n",
        "    prompt = f\"\"\"\n",
        "        You are a highly skilled business strategist specializing in e-commerce. Based on the following details, suggest actionable strategies to optimize pricing, promotions, and customer satisfaction:\n",
        "\n",
        "        1. **Product Name**: {product_name}\n",
        "        2. **Competitor Data** (including current prices, discounts, and predicted discounts):\n",
        "        {competitor_data}\n",
        "        3. **Sentiment Analysis**: {sentiment}\n",
        "        4. **Today's Date**: {str(date)}\n",
        "\n",
        "        ### Tasks:\n",
        "        - Analyze the competitor data and identify key pricing trends.\n",
        "        - Leverage sentiment analysis insights to highlight areas where customer satisfaction can be improved.\n",
        "        - Use the discount predictions to suggest how pricing strategies can be optimized over the next 5 days.\n",
        "        - Recommend promotional campaigns or marketing strategies that align with customer sentiments and competitive data.\n",
        "        - Ensure the strategies are actionable, realistic, and geared toward increasing customer satisfaction and driving sales.\n",
        "    \"\"\"\n",
        "\n",
        "    messages = [{\"role\": \"user\", \"content\": prompt}]\n",
        "    data = {\n",
        "        \"messages\": messages,\n",
        "        \"model\": \"llama3-ob-8192\",\n",
        "        \"temperature\": 0.8,\n",
        "    }\n",
        "    headers = {\n",
        "        \"Content-Type\": \"application/json\",\n",
        "        \"Authorization\": f\"Bearer {API_KEY}\",\n",
        "    }\n",
        "    res = requests.post(\n",
        "        \"https://api.groq.com/openai/v1/chat/completions\",\n",
        "        data=json.dumps(data),\n",
        "        headers=headers,\n",
        "    )\n",
        "    response = res.json()\n",
        "    return response[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "\n",
        "# Streamlit Dashboard\n",
        "st.set_page_config(page_title=\"E-Commerce Competitor Strategy Dashboard\", layout=\"wide\")\n",
        "\n",
        "st.title(\"E-Commerce Competitor Strategy Dashboard\")\n",
        "\n",
        "st.sidebar.header(\"Select a Product\")\n",
        "\n",
        "products = [\n",
        "    \"Apple iPhone 15\",\n",
        "    \"Apple 2023 MacBook Pro (16-inch, Apple M3 Pro chip)\",\n",
        "    \"OnePlus Nord 4 5G (Mercurial Silver, 8GB RAM, 256GB Storage)\",\n",
        "    \"Sony WH-1000XM5 Best Active Noise Cancelling Wireless Headphones\",\n",
        "]\n",
        "selected_product = st.sidebar.selectbox(\"Choose a product to analyze:\", products)\n",
        "\n",
        "competitor_data = load_competitor_data()\n",
        "reviews_data = load_reviews_data()\n",
        "\n",
        "product_data = competitor_data[competitor_data[\"product_name\"] == selected_product]\n",
        "product_reviews = reviews_data[reviews_data[\"product_name\"] == selected_product]\n",
        "\n",
        "st.header(f\"Competitor Analysis for {selected_product}\")\n",
        "\n",
        "st.subheader(\"Competitor Data\")\n",
        "st.table(product_data.tail(5))\n",
        "\n",
        "if not product_reviews.empty:\n",
        "    product_reviews[\"reviews\"] = product_reviews[\"reviews\"].apply(\n",
        "        lambda x: truncate_text(x, 512)\n",
        "    )\n",
        "    reviews = product_reviews[\"reviews\"].tolist()\n",
        "    sentiments = analyze_sentiment(reviews)\n",
        "\n",
        "    st.subheader(\"Customer Sentiment Analysis\")\n",
        "    sentiment_df = pd.DataFrame(sentiments)\n",
        "    fig = px.bar(sentiment_df, x=\"label\", title=\"Sentiment Analysis Results\")\n",
        "    st.plotly_chart(fig)\n",
        "else:\n",
        "    st.write(\"No reviews available for this product.\")\n",
        "\n",
        "product_data[\"Date\"] = pd.to_datetime(product_data[\"Date\"], errors=\"coerce\")\n",
        "product_data = product_data.dropna(subset=[\"Date\"])\n",
        "product_data.set_index(\"Date\", inplace=True)\n",
        "product_data = product_data.sort_index()\n",
        "product_data[\"Discount\"] = pd.to_numeric(product_data[\"Discount\"], errors=\"coerce\")\n",
        "product_data = product_data.dropna(subset=[\"Discount\"])\n",
        "\n",
        "# Forecasting Model\n",
        "product_data_with_predictions = forecast_discounts_arima(product_data)\n",
        "\n",
        "st.subheader(\"Competitor Current and Predicted Discounts\")\n",
        "st.table(product_data_with_predictions.tail(10))\n",
        "\n",
        "recommendations = generate_strategy_recommendation(\n",
        "    selected_product,\n",
        "    product_data_with_predictions,\n",
        "    sentiments if not product_reviews.empty else \"No reviews available\",\n",
        ")\n",
        "\n",
        "st.subheader(\"Strategic Recommendations\")\n",
        "st.write(recommendations)\n",
        "\n",
        "send_to_slack(recommendations)\n"
      ],
      "metadata": {
        "id": "6Y-tmi7emihS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}